using Nop.Core;
using Nop.Services.Messages;
using Nop.Plugin.Misc.PaymentGuard.Domain;
using System.Text.Json;
using Nop.Services.Helpers;
using Nop.Services.Logging;
using Nop.Core.Domain.Messages;
using DocumentFormat.OpenXml.Bibliography;
using Nop.Plugin.Misc.PaymentGuard.Dto;

namespace Nop.Plugin.Misc.PaymentGuard.Services
{
    public partial class EmailAlertService : IEmailAlertService
    {
        private readonly IEmailSender _emailSender;
        private readonly IDateTimeHelper _dateTimeHelper;
        private readonly ILogger _logger;
        private readonly EmailAccountSettings _emailAccountSettings;
        private readonly IEmailAccountService _emailAccountService;
        private readonly IQueuedEmailService _queuedEmailService;

        public EmailAlertService(IEmailSender emailSender,
            IDateTimeHelper dateTimeHelper,
            ILogger logger,
            EmailAccountSettings emailAccountSettings,
            IEmailAccountService emailAccountService,
            IQueuedEmailService queuedEmailService)
        {
            _emailSender = emailSender;
            _dateTimeHelper = dateTimeHelper;
            _logger = logger;
            _emailAccountSettings = emailAccountSettings;
            _emailAccountService = emailAccountService;
            _queuedEmailService = queuedEmailService;
        }

        #region Utilities

        public virtual async Task<int> SendNotificationAsync(string subject,
            string body, string toEmailAddress, string toName,
            string fromEmail = null, string fromName = null)
        {
            var emailAccount = (await _emailAccountService.GetEmailAccountByIdAsync(_emailAccountSettings.DefaultEmailAccountId)) ??
               (await _emailAccountService.GetAllEmailAccountsAsync()).FirstOrDefault();

            //limit name length
            toName = CommonHelper.EnsureMaximumLength(toName, 300);

            var email = new QueuedEmail
            {
                Priority = QueuedEmailPriority.High,
                From = !string.IsNullOrEmpty(fromEmail) ? fromEmail : emailAccount.Email,
                FromName = !string.IsNullOrEmpty(fromName) ? fromName : emailAccount.DisplayName,
                To = toEmailAddress,
                ToName = toName,
                Subject = subject,
                Body = body,
                CreatedOnUtc = DateTime.UtcNow,
                EmailAccountId = emailAccount.Id
            };

            await _queuedEmailService.InsertQueuedEmailAsync(email);
            return email.Id;
        }

        #endregion

        #region Methods

        public virtual async Task SendUnauthorizedScriptAlertAsync(string alertEmail, ScriptMonitoringLog log, string storeName)
        {
            try
            {
                var unauthorizedScripts = JsonSerializer.Deserialize<List<string>>(log.UnauthorizedScripts ?? "[]");

                var subject = $"PaymentGuard Alert - Unauthorized Scripts Detected ({storeName})";

                var createdOn = (await _dateTimeHelper.ConvertToUserTimeAsync(log.CheckedOnUtc, DateTimeKind.Utc)).ToString(CoreConstants.DEFAULT_DATETIME_FORMAT);

                var body = $@"
                    <h2>PaymentGuard Security Alert</h2>
                    <p><strong>Store:</strong> {storeName}</p>
                    <p><strong>Page:</strong> {log.PageUrl}</p>
                    <p><strong>Time:</strong> {createdOn}</p>
                    
                    <h3>Unauthorized Scripts Detected:</h3>
                    <ul>
                        {string.Join("", unauthorizedScripts.Select(script => $"<li><code>{script}</code></li>"))}
                    </ul>
                    
                    <h3>Summary:</h3>
                    <ul>
                        <li>Total scripts found: {log.TotalScriptsFound}</li>
                        <li>Authorized scripts: {log.AuthorizedScriptsCount}</li>
                        <li>Unauthorized scripts: {log.UnauthorizedScriptsCount}</li>
                    </ul>
                    
                    <p><strong>Action Required:</strong> Please review these unauthorized scripts and either authorize them or remove them from your payment pages to maintain PCI DSS compliance.</p>
                    
                    <hr>
                    <small>This alert was generated by PaymentGuard PCI DSS Compliance System</small>
                ";

                await SendNotificationAsync(subject, body, alertEmail, storeName, alertEmail, storeName);
                await _logger.InformationAsync($"Unauthorized script alert sent to {alertEmail} for store {storeName}");
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync($"Failed to send unauthorized script alert to {alertEmail}", ex);
            }
        }

        public virtual async Task SendComplianceReportAsync(string alertEmail, string storeName, ComplianceReport report)
        {
            try
            {
                var subject = $"PaymentGuard Compliance Report ({storeName})";

                var body = $@"
                    <h2>PaymentGuard Compliance Report</h2>
                    <p><strong>Store:</strong> {storeName}</p>
                    <p><strong>Report Generated:</strong> {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC</p>
                    
                    <h3>Compliance Score: {report.ComplianceScore:F1}%</h3>
                    
                    <h3>Summary:</h3>
                    <table border='1' cellpadding='5' cellspacing='0'>
                        <tr><td>Total Scripts Monitored</td><td>{report.TotalScriptsMonitored}</td></tr>
                        <tr><td>Authorized Scripts</td><td>{report.AuthorizedScriptsCount}</td></tr>
                        <tr><td>Unauthorized Scripts</td><td>{report.UnauthorizedScriptsCount}</td></tr>
                        <tr><td>Total Checks Performed</td><td>{report.TotalChecksPerformed}</td></tr>
                        <tr><td>Alerts Generated</td><td>{report.AlertsGenerated}</td></tr>
                        <tr><td>Last Check</td><td>{report.LastCheckDate:yyyy-MM-dd HH:mm:ss} UTC</td></tr>
                    </table>
                    
                    {(report.MostCommonUnauthorizedScripts.Any() ?
                        $@"<h3>Most Common Unauthorized Scripts:</h3>
                           <ul>{string.Join("", report.MostCommonUnauthorizedScripts.Select(script => $"<li><code>{script}</code></li>"))}</ul>" : "")}
                    
                    <hr>
                    <small>This report was generated by PaymentGuard PCI DSS Compliance System</small>
                
                ";

                await SendNotificationAsync(subject, body, alertEmail, storeName, alertEmail, storeName);
                await _logger.InformationAsync($"Compliance report sent to {alertEmail} for store {storeName}");
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync($"Failed to send compliance report to {alertEmail}", ex);
            }
        }

        public virtual async Task SendScriptChangeAlertAsync(string alertEmail, string scriptUrl, string storeName)
        {
            try
            {
                var subject = $"PaymentGuard Alert - Script Change Detected ({storeName})";

                var body = $@"
                    <h2>PaymentGuard Script Change Alert</h2>
                    <p><strong>Store:</strong> {storeName}</p>
                    <p><strong>Changed Script:</strong> <code>{scriptUrl}</code></p>
                    <p><strong>Time:</strong> {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC</p>
                    
                    <p><strong>Action Required:</strong> A previously authorized script has been modified. Please verify this change is legitimate and update the script hash if necessary.</p>
                    
                    <hr>
                    <small>This alert was generated by PaymentGuard PCI DSS Compliance System</small>
                ";

                await SendNotificationAsync(subject, body, alertEmail, storeName, alertEmail, storeName);
                await _logger.InformationAsync($"Script change alert sent to {alertEmail} for store {storeName}");
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync($"Failed to send script change alert to {alertEmail}", ex);
            }
        }

        public virtual async Task SendCSPViolationAlertAsync(string alertEmail, string violationDetails, string storeName)
        {
            try
            {
                var subject = $"PaymentGuard Alert - CSP Violation ({storeName})";

                var body = $@"
                    <h2>PaymentGuard CSP Violation Alert</h2>
                    <p><strong>Store:</strong> {storeName}</p>
                    <p><strong>Time:</strong> {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC</p>
                    
                    <h3>Violation Details:</h3>
                    <pre>{violationDetails}</pre>
                    
                    <p><strong>Action Required:</strong> A Content Security Policy violation has been detected. Please review your CSP configuration and authorized scripts.</p>
                    
                    <hr>
                    <small>This alert was generated by PaymentGuard PCI DSS Compliance System</small>
                ";

                await SendNotificationAsync(subject, body, alertEmail, storeName, alertEmail, storeName);
                await _logger.InformationAsync($"CSP violation alert sent to {alertEmail} for store {storeName}");
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync($"Failed to send CSP violation alert to {alertEmail}", ex);
            }
        }

        public virtual async Task SendExpiredScriptsAlertAsync(string alertEmail, IList<AuthorizedScript> expiredScripts, string storeName)
        {

            try
            {
                var subject = $"PaymentGuard Alert - Scripts Need Verification ({storeName})";

                var scriptList = string.Join("", expiredScripts.Select(s =>
                    $"<li><code>{s.ScriptUrl}</code> - Last verified: {s.LastVerifiedUtc:yyyy-MM-dd}</li>"));

                var body = $@"
                    <h2>PaymentGuard Script Verification Alert</h2>
                    <p><strong>Store:</strong> {storeName}</p>
                    <p><strong>Time:</strong> {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC</p>
            
                    <h3>Scripts Requiring Verification:</h3>
                    <ul>{scriptList}</ul>
            
                    <p><strong>Action Required:</strong> These scripts haven't been verified in over 30 days. 
                    Please review them and update their hashes if they have changed, or verify they are still authorized.</p>
            
                    <hr>
                    <small>This alert was generated by PaymentGuard PCI DSS Compliance System</small>
                ";

                await SendNotificationAsync(subject, body, alertEmail, storeName, alertEmail, storeName);
                await _logger.InformationAsync($"Scripts Need Verification alert sent to {alertEmail} for store {storeName}");
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync($"Failed to send Scripts Need Verification alert to {alertEmail}", ex);
            }
        }

        #endregion
    }
}